
function result = TF32_add(operand_A , operand_B)

    operand_A = fi(operand_A, true, 19, 0);
    operand_B = fi(operand_B, true, 19, 0);

    % 檢查是否為正零或負零
    Is_A_Zero = (operand_A == string_to_fixpoint('0000000000000000000', 19, 0)) || (operand_A == string_to_fixpoint('1000000000000000000', 19, 0));
    Is_B_Zero = (operand_B == string_to_fixpoint('0000000000000000000', 19, 0)) || (operand_B == string_to_fixpoint('1000000000000000000', 19, 0));

    
    % 解析指數部分（第 17:10 位）
    exp_A = bitshift(bitand(operand_A, bin2dec('111111110000000000')), -10);
    exp_B = bitshift(bitand(operand_B, bin2dec('111111110000000000')), -10);
    % 判斷 A 的指數是否較大
    Is_A_Exp_L = (exp_A >= exp_B);
    % 計算指數差異
    if Is_A_Exp_L
        exp_diff = exp_A - exp_B;
    else
        exp_diff = exp_B - exp_A;
    end
    % 計算偏移量（bias 128）
    exp_A_bias255 = exp_A + 128;
    exp_B_bias255 = exp_B + 128;


    % % 提取尾數部分（第 9:0 位）
    a_m = bin(operand_A);
    b_m = bin(operand_B);

    % 加上隱含位 (leading one)
    if Is_A_Zero
        unsign_mantissa_A = string_to_fixpoint(a_m(end-9:end), 12, 0); % {2'b00, mantissa_A} % 取出 operand_A[9:0]
    else
        unsign_mantissa_A = string_to_fixpoint("01" + a_m(end-9:end), 12, 0); % {2'b01, mantissa_A} % 取出 operand_A[9:0]
    end
    if Is_B_Zero
        unsign_mantissa_B = string_to_fixpoint(b_m(end-9:end), 12, 0); % {2'b00, mantissa_B} % 取出 operand_B[9:0]
    else
        unsign_mantissa_B = string_to_fixpoint("01" + b_m(end-9:end), 12, 0);  % {2'b01, mantissa_B} % 取出 operand_B[9:0]
    end

    
    % 提取符號位
    sign_A = bitget(operand_A, 19); % operand_A[18]
    sign_B = bitget(operand_B, 19); % operand_B[18]
    % unsign_mantissa + sign 位元修正，轉換為有號數
    if sign_A
        sign_mantissa_A = fi(unsign_mantissa_A * -1, true, 12, 0);
    else
        sign_mantissa_A = fi(unsign_mantissa_A, true, 12, 0);
    end
    if sign_B
        sign_mantissa_B = fi(unsign_mantissa_B * -1, true, 12, 0);
    else
        sign_mantissa_B = fi(unsign_mantissa_B, true, 12, 0);
    end

    PRECISION_BIT_LEN = 25;
    % Add precision bits(to keep result's sticky bits)
    sign_mantissa_A_prec = string_to_fixpoint(strcat(bin(sign_mantissa_A), repmat('0', 1, PRECISION_BIT_LEN)) , 12+PRECISION_BIT_LEN, 0);
    sign_mantissa_B_prec = string_to_fixpoint(strcat(bin(sign_mantissa_B), repmat('0', 1, PRECISION_BIT_LEN)) , 12+PRECISION_BIT_LEN, 0);
    
    sign_bit_1 = sign_mantissa_A_prec(1);
    % 執行右移：去掉最後 n 位，前面補 n 個符號位
    shifted_str_1 = [repmat(sign_bit_1, 1, exp_diff), sign_mantissa_A_prec(1:end-exp_diff)];
    sign_bit_2 = sign_mantissa_A_prec(1);
    % 執行右移：去掉最後 n 位，前面補 n 個符號位
    shifted_str_1 = [repmat(sign_bit_1, 1, exp_diff), sign_mantissa_A_prec(1:end-exp_diff)];
    
    % 
    disp(bin(sign_mantissa_A_prec))
    disp(bin(sign_mantissa_B_prec))
    result = 0;


    keyboard  
end

